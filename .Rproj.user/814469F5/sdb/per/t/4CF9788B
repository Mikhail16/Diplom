{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(plotly)\nlibrary(ggplot2movies)\nlibrary(hht)\nshinyServer(function(input, output, session) {\n  #PAGE 1\n  selectedData2<-reactive({\n    table<-matrix(,nrow = 1,ncol=8)\n    table[1,1]<-as.numeric(input$textd)\n    table[1,2]<-as.numeric(input$textdel)\n    table[1,3]<-as.numeric(input$textE)\n    table[1,4]<-as.numeric(input$textP)\n    \n    if (input$radio == \"nafta\") {\n      # ro <- (825)\n      table[1,5] <- (840)      \n      #ksi <- (9.7*10^-6)\n      table[1,6]  <- (5*10^-6) # kinemat vyazkist'\n      if (input$textT == 273) {\n        table[1,7] <- 1400\n      }\n      if (input$textT == 283) {\n        table[1,7] <- 1332\n      }\n      if (input$textT == 293) {\n        table[1,7] <- 1292\n      }\n      if (input$textT == 303) {\n        table[1,7] <- 1253\n      }\n      if (input$textT == 313) {\n        table[1,7] <- 1216\n      }\n    }\n    if (input$radio == \"palevo\") {\n      table[1,5] <- (860)\n      table[1,6] <- (4.5*10^-6)\n      updateSelectInput(session, \"textT\", choices = (\"293\" = 293))\n      table[1,7] <- 1392\n    }\n    if (input$radio == \"gas\") {\n      table[1,5] <- (400)\n      table[1,6] <- (14.3*10^-6)\n      updateSelectInput(session, \"textT\", choices = (\"293\" = 293))\n      table[1,7]<-460\n    }\n    if (input$radio == \"povitrya\") {\n      table[1,5] <- (1.203268)\n      table[1,6] <- (1.49663*10^-5)\n      updateSelectInput(session, \"textT\", choices = (\"293\" = 293))\n      table[1,7]<-sqrt(1.4019*table[1,4]/table[1,5])\n    }\n    if (input$radio == \"amiak\") {\n      table[1,5] <- (0.771)\n      table[1,6] <- (1.20623*10^-5)\n      updateSelectInput(session, \"textT\", choices = (\"293\" = 293))\n      table[1,7]<-sqrt(1.31*table[1,4]/table[1,5]) \n    }\n    if (input$radio == \"metan\") {\n      table[1,5] <- (0.667016)\n      table[1,6] <- (1.55946*10^-5)\n      updateSelectInput(session, \"textT\", choices = (\"293\" = 293))\n      table[1,7]<-sqrt(1.31*table[1,4]/table[1,5]) \n    }\n    table[1,8]<-as.numeric(input$textT)\n    colnames(table)<-c(\"d\",\"del\",\"E\",\"P\",\"ro\",\"ksi\",\"c\",\"T\")\n    table\n    \n    \n  })\n  \n  \n  output$rezultC <- renderText({\n    data<-as.data.frame(selectedData2())\n    B <- (data$c ^ 2) * data$ro\n    Ct <- data$c / sqrt( 1 + (data$d * B) / (data$del * data$E) )\n    rezultC <- Ct\n  })\n  \n  output$rezultf <- renderText({\n    data<-as.data.frame(selectedData2())\n    updateTextInput(session, \"textc\", value = data$c)\n    updateTextInput(session, \"textro\", value = data$ro)\n    updateTextInput(session, \"textksi\", value = data$ksi)\n    r <- (data$d / 2)\n    f <- (0.61 * data$c / r)\n    #fmax <- f%/%1\n    fmax <- floor(f)\n    updateSliderInput(session, \"rezultf_sl\", max = fmax)\n    rezultf <- f\n  })\n  \n  \n  output$rezultBet <- renderText({\n    data<-as.data.frame(selectedData2())\n    eta <- data$ksi * data$ro\n    updateTextInput(session, \"texteta\", value = eta)\n    b <- (4 / 3 * eta + data$ksi)\n    w <- 2 * pi * input$rezultf_sl\n    a <- (data$d / 2)\n    #Bet <- ( (b * w^2) / (2 * c^3 * ro) ) + ( (1 / a) * ( (eta * w) / (2 * c^2 * ro)  )^(1/2) )\n    Bet <- ( (b * w^2) / (2 * data$c^3 * data$ro) ) + ( (1 / a) * ( (eta * w) / (2 * data$c^2 * data$ro)  )^(1/2) )*8.68*1000\n    output$rezultCw <- renderText({\n      Cw <- data$c *( 1 - (eta / (2 * data$ro * w * a^2))^(1/2) )\n      rezultCw <- Cw\n    })\n    rezultBet <- Bet\n  })\n  \n  \n  output$TempPlot1 <- renderPlot({\n    data<-as.data.frame(selectedData2())\n    B <- (data$c ^ 2) * data$ro\n    x <- data.frame( nafta = c(\"nafta\", \"nafta\", \"nafta\", \"nafta\", \"nafta\"), Temperatura = c(273, 283, 293, 303, 313), C = c(1374, 1332, 1292, 1253, 1216) )\n    # x$Ct_ <- 1/sqrt( 1 + (data$d * data$B) / (data$del * data$E) )\n    x$Ct_ <- 1/sqrt( 1 + (data$d * B) / (data$del * data$E) )\n    ggplot(x, aes(Temperatura, y = value, color = variable))+ \n      \n      geom_line(aes(y = Ct_, col = \"Ct_\"))+\n      \n      geom_point(aes(y = Ct_, col = \"Ct_\"))\n    \n  })\n  \n  output$TempPlot <- renderPlot({\n    data<-as.data.frame(selectedData2())\n    B <- (data$c ^ 2) * data$ro\n    x <- data.frame( nafta = c(\"nafta\", \"nafta\", \"nafta\", \"nafta\", \"nafta\"), Temperatura = c(273, 283, 293, 303, 313), C = c(1374, 1332, 1292, 1253, 1216) )\n    x$Ct <- x$C/sqrt( 1 + (data$d * B) / (data$del * data$E) )\n    \n    ggplot(x, aes(Temperatura, y = value, color = variable))+ \n      geom_line(aes(y = C, col = \"C\")) + \n      geom_line(aes(y = Ct, col = \"Ct\"))+\n      geom_point(aes(y = C, col = \"C\"))+\n      geom_point(aes(y = Ct, col = \"Ct\"))\n    \n  })\n  \n  #згасання в середовищі\n  selectedData3<-reactive({\n    # colnames(table)<-c(\"d\",\"del\",\"E\",\"P\",\"ro\",\"ksi\",\"c\",\"T\")\n    data<-as.data.frame(selectedData2())\n    eta <- data$ksi * data$ro\n    updateTextInput(session, \"texteta\", value = eta)\n    b <- (4 / 3 * eta + data$ksi)\n    #change of diaments\n    dd<-seq(0.025,data$d, 0.025)\n    w<-NULL\n    a<-NULL\n    Bet<-NULL\n    r <- (data$d / 2)\n    f <- (0.61 * data$c / r)\n    freq<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),50)\n    Bet<-matrix(, nrow = length(freq), ncol = length(dd))\n    \n    for(i in (1:length(freq))){\n      w[i] <- 2 * pi *freq[i]  \n      for(j in (1:length(dd))){\n        a[j] <- (dd[j] / 2)\n        Bet[i,j] <- ( (b * w[i]^2) / (2 * data$c^3 * data$ro) ) + ( (1 / a[j]) * ( (eta * w[i]) / (2 * data$c^2 * data$ro)  )^(1/2) )*8.68*1000\n      }\n      \n    }\n    Bet \n    \n  })\n  \n  \n  output$trendPlot <- renderPlotly({\n    data<-as.data.frame(selectedData2())\n    dd<-seq(0.025,data$d, 0.025)\n    r <- (data$d / 2)\n    f <- (0.61 * data$c / r)\n    freq<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),50)\n    Bet<-selectedData3()\n    \n    \n    plot_ly(x = dd, y = freq, z = Bet, type = \"surface\")\n  })\n  \n  output$trendс1 <-renderPlotly({\n    data<-as.data.frame(selectedData2())\n    \n    \n    eta <- data$ksi * data$ro\n    updateTextInput(session, \"texteta\", value = eta)\n    b <- (4 / 3 * eta + data$ksi)\n    \n    #change shvydkist\n    dd<-seq(0.025,data$d, 0.025)\n    w<-NULL\n    a<-NULL\n    Cw<-NULL\n    r <- (data$d / 2)\n    \n    freq<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),50)\n    Cw<-matrix(, nrow = length(freq), ncol = length(dd))\n    \n    for(i in (1:length(freq))){\n      w[i] <- 2 * pi *freq[i]  \n      for(j in (1:length(dd))){\n        a[j] <- (dd[j] / 2)\n        Cw[i,j] <- data$c *( 1 - (eta / (2 * data$ro * w[i] * a[j]^2))^(1/2) )\n      }\n      \n    }\n    Cw \n    plot_ly(x = dd, y = freq, z = Cw, type = \"surface\")\n  })\n  \n  Data4<-reactive({\n    data<-as.data.frame(selectedData2())\n    dd<-seq(0.025,data$d, 0.025)\n    w<-NULL\n    a<-NULL\n    Y<-NULL\n    k<-NULL\n    Y<-2*pi*(as.numeric(input$textdotv)/2)^2/(2*as.numeric(input$textlotv)+pi*(as.numeric(input$textdotv)/2))\n    freq<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),50)\n    Vabs<-matrix(, nrow = length(freq), ncol = length(dd))\n    B1<-matrix(, nrow = length(freq), ncol = length(dd))\n    A1<-matrix(, nrow = length(freq), ncol = length(dd))\n    for(i in (1:length(freq))){\n      k[i] <- 2 * pi *freq[i]/data$c  \n      for(j in (1:length(dd))){\n        B1[i,j]<-data$ro*data$c*k[i]/Y;\n        A1[i,j]<-data$ro*data$c/(pi*(dd[j]/2)^2)\n        Vabs[i,j] <- sqrt((A1[i,j]^2/(A1[i,j]^2+4*B1[i,j]^2))^2+(2*A1[i,j]*B1[i,j]/(A1[i,j]^2+4*B1[i,j]^2))^2)\n      }\n      \n    }\n    Vabs \n  })\n  \n  output$trendVabs<-renderPlotly({\n    data<-as.data.frame(selectedData2())\n    dd<-seq(0.025,data$d, 0.025)\n    \n    freq<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),50)\n    Vabs<-Data4()\n    plot_ly(x = dd, y = freq, z =Vabs , type = \"surface\")\n    \n  })\n  \n  Dataotvir<-reactive({\n    data<-as.data.frame(selectedData2())\n    \n    if (input$radio1 == \"otvir\") {\n      freq<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),25)\n      h<-seq(0.002,0.04,0.00125)\n      dotv<-as.numeric(input$textdotv)\n      hotv<-as.numeric(input$textlotv)\n      Y<-matrix(, nrow = length(freq), ncol = length(h))\n      k<-matrix(, nrow = length(freq), ncol = length(h))\n      Vabs1<-matrix(, nrow = length(freq), ncol = length(h))\n      B1<-matrix(, nrow = length(freq), ncol = length(h))\n      A1<-matrix(, nrow = length(freq), ncol = length(h))\n      for(i in (1:length(freq))){\n        for(j in (1:length(h))){\n          \n          Y[i,j]<-2*pi*(dotv/2)^2/(2*h[j]+pi*(dotv/2))\n          k[i,j]<-2*pi*freq[i]/data$c\n          B1[i,j]<-data$ro*data$c*k[i,j]/Y[i,j]\n          A1[i,j]<-data$ro*data$c/(pi*(as.numeric(input$textd)/2)^2)\n          Vabs1[i,j] <- sqrt((A1[i,j]^2/(A1[i,j]^2+4*B1[i,j]^2))^2+(2*A1[i,j]*B1[i,j]/(A1[i,j]^2+4*B1[i,j]^2))^2)\n          \n        } }\n      \n      output$rezult <- renderText({\n        \n        \n        Y1<-2*pi*(dotv/2)^2/(2*hotv+pi*(dotv/2))\n        k1<-2*pi*as.numeric(input$rezultf_sl)/data$c\n        B11<-data$ro*data$c*k1/Y1\n        A11<-data$ro*data$c/(pi*(as.numeric(input$textd)/2)^2)\n        Vabs11 <- sqrt((A11^2/(A11^2+4*B11^2))^2+(2*A11*B11/(A11^2+4*B11^2))^2)\n        rezult1 <- abs(20*log10(Vabs11))\n        ####\n        data<-as.data.frame(selectedData2())\n        eta <- data$ksi * data$ro\n        updateTextInput(session, \"texteta\", value = eta)\n        b <- (4 / 3 * eta + data$ksi)\n        w <- 2 * pi * input$rezultf_sl\n        a <- (data$d / 2)\n        #Bet <- ( (b * w^2) / (2 * c^3 * ro) ) + ( (1 / a) * ( (eta * w) / (2 * c^2 * ro)  )^(1/2) )\n        Bet <- ( (b * w^2) / (2 * data$c^3 * data$ro) ) + ( (1 / a) * ( (eta * w) / (2 * data$c^2 * data$ro)  )^(1/2) )*8.68*1000\n        \n        ####\n        output$rezultPower<-renderText({\n          rezultPower<-(as.numeric(input$textPower)- rezult1)/(2*Bet)\n        })\n        rezult<-rezult1\n        \n      })\n      \n    }\n    if (input$radio1 == \"elips\") {\n      botv<-as.numeric(input$textdotv)/2\n      h<-as.numeric(input$textlotv)\n      ee<-NULL\n      aotv<-NULL\n      b<-NULL\n      q<-NULL\n      b<-seq(0.0005,botv*2, 0.0005)\n      q<-seq(1,30,1)\n      Ke<-matrix(, nrow = length(b), ncol = length(q))\n      Ktr<-matrix(, nrow = length(b), ncol = length(q))\n      Y1<-matrix(, nrow = length(b), ncol = length(q))\n      Vabs1<-matrix(, nrow = length(b), ncol = length(q))\n      B1<-matrix(, nrow = length(b), ncol = length(q))\n      A1<-matrix(, nrow = length(b), ncol = length(q))\n      ee1<-matrix(, nrow = length(b), ncol = length(q))\n      for(i in (1:length(b))){\n        # aotv[i] <- q[i]*botv  \n        # ee[i]<-sqrt(1-botv^2/aotv[i]^2) \n        \n        for(j in (1:length(q))){\n          ee1[i,j]<-sqrt(1-1/q[j]^2) \n          Ke[i,j]<-2*sqrt(pi*b[i]^2*q[j]/pi)*(1+ee1[i,j]^4/64+ee1[i,j]^8/64)\n          Ktr[i,j]<-pi*b[i]^2*q[j]/h\n          Y1[i,j]<-Ktr[i,j]*Ke[i,j]/(Ktr[i,j]+Ke[i,j])\n          # k<-2*pi*50/data$c\n          k<-2*pi*as.numeric(input$rezultf_sl)/data$c\n          B1[i,j]<-data$ro*data$c*k/Y1[i,j]\n          A1[i,j]<-data$ro*data$c/(pi*(as.numeric(input$textd)/2)^2)\n          Vabs1[i,j] <- sqrt((A1[i,j]^2/(A1[i,j]^2+4*B1[i,j]^2))^2+(2*A1[i,j]*B1[i,j]/(A1[i,j]^2+4*B1[i,j]^2))^2)\n          \n        } }\n      \n      output$rezult <- renderText({\n        \n        rezult1 <- abs(20*log10(Vabs1[which(b==botv), which(q==3)]))\n        #Vabs1[which(b==botv), which(q==3)]\n        ####\n        \n        \n        data<-as.data.frame(selectedData2())\n        eta <- data$ksi * data$ro\n        updateTextInput(session, \"texteta\", value = eta)\n        b <- (4 / 3 * eta + data$ksi)\n        w <- 2 * pi * input$rezultf_sl\n        a <- (data$d / 2)\n        #Bet <- ( (b * w^2) / (2 * c^3 * ro) ) + ( (1 / a) * ( (eta * w) / (2 * c^2 * ro)  )^(1/2) )\n        Bet <- ( (b * w^2) / (2 * data$c^3 * data$ro) ) + ( (1 / a) * ( (eta * w) / (2 * data$c^2 * data$ro)  )^(1/2) )*8.68*1000\n        \n        ####\n        output$rezultPower<-renderText({\n          rezultPower<-(as.numeric(input$textPower)- rezult1)/(2*Bet)\n        })\n        rezult<-rezult1\n        \n      })\n      \n    }\n    if (input$radio1 == \"close\") {\n      \n    }\n    Vabs1\n    #ee1\n    \n  })\n  \n  output$trendVabs1<-renderPlotly({\n    #  data<-as.data.frame(selectedData2())\n    if (input$radio1 == \"elips\") {\n      b<-seq(0.0005,as.numeric(input$textdotv), 0.0005)\n      qq<-seq(1,30,1)}\n    if (input$radio1 == \"otvir\") {\n      b<-seq(as.numeric(input$textfreq1),as.numeric(input$textfreq2),25)\n      qq<-seq(0.002,0.04,0.00125)\n    }\n    \n    #   dd<-seq(0.001,as.numeric(input$textdotv)/2, 0.001)\n    #          kk<-seq(1,30,1)\n    Vabs1 <- 20*log10(Dataotvir())\n    p<- plot_ly(x = qq, y = b, z =Vabs1 , type = \"surface\") %>%\n      layout(title = \"Різниця амплітуд відбитого і падаючого сигналів від довжини відгалуження та чатоти несучої сигналу\",\n             scene = list(\n               xaxis = list(title = \"Довжина відгалуження, м\"), \n               yaxis = list(title = \"Частота, Гц\"), \n               zaxis = list(title = \"Спад амплітуди, дБ\")))\n    p\n    \n  })\n  \n  selectedData1<-reactive({\n    table<-matrix(1:6,nrow = 2,ncol = 3)\n  })\n  output$table1<-renderTable({\n    # Data4()\n    Dataotvir()\n  })\n  br()\n  output$table2<-renderTable({\n    selectedData2()\n  })\n  \n  br()\n  output$table3<-renderTable({\n    selectedData3()\n  })\n  \n  #PAGE 2\n  output$page2 <- renderText({\n    \n    Ts <- as.numeric(input$Ts_us)\n    f <- as.numeric(input$fq_bar)\n    i <- seq(0, (Ts-(1/f)),by = 1/f)\n    f_sin <- as.numeric(input$f_sin)\n    y5 <- sin(2 * pi * f_sin * i)\n    \n    if(input$barker_y6 == \"y6_y5\"){\n      output$out2 <- renderText({\n        \"barker_3\"\n      })\n      y6 <- (-1) * y5\n    }\n    if(input$barker_y6 == \"zero_zero\"){\n      output$out2 <- renderText({\n        \"barker_3\"\n      })\n      y6 <- 0\n    }\n    if(input$barker_y6 == \"double_y5\"){\n      output$out2 <- renderText({\n        \"barker_3\"\n      })\n      y6 <- sin(2*pi*2*f_sin*i)\n    }\n    \n    if(input$barker == \"barker_3\"){\n      output$out1 <- renderText({\n        \"barker_3\"\n      })\n      \n      n <- length(y5)\n      y_000 <- y5\n      y_000[n:(2*n-1)] <- y5\n      y_000[(2*n):(3*n-1)] <- y6\n      \n      lh_z <- as.numeric(input$length_zero)\n      y_rez <- 0\n      y_rez[1:length(i)] <- 0\n      y_rez[(length(i)+1):(1+length(y_000)+length(i)-1)] <- y_000\n      y_rez[(1+length(y_000)+length(i)):(1+length(y_000)+lh_z*length(i))] <- 0\n      y_rez[(2+length(y_000)+lh_z*length(i)):(length(y_000)+(lh_z+3)*length(i))] <- (0.1)*y_000\n      y_rez[(1+length(y_000)+(lh_z+3)*length(i)):(1+length(y_000)+(lh_z+6)*length(i))] <- 0\n      \n      noise_k <- as.numeric(input$noise_k)\n      yqq <- (jitter(y_rez, amount = noise_k))\n      \n      y_001 <- 0\n      y_001[1:length(y_000)] <- y_000\n      y_001[(length(y_000)+1):length(yqq)] <- 0\n      \n      N<-length(yqq)\n      Rxy<-rep(0, N-1)\n      Rxy1<-rep(0, N-1)\n      Rxy0<-rep(0, 2*N-1)\n\n      for(j in 1:N){\n        sum1 <- 0\n\n        for(k in 1:(N-j+1)){\n          sum1 <- sum1 + yqq[k]*y_001[k+j-1]\n        }\n\n        Rxy[j]<-sum1\n      }\n      # plot(Rxy,type=\"l\")\n\n      for (j in 1:N){\n        sum1 <- 0\n        for (k in 1:(N-j+1)){\n          sum1 <- sum1 + y_001[k] * yqq[k + j-1]\n        }\n        Rxy1[j] <- sum1\n      }\n      # plot(Rxy1, type=\"l\")\n\n      for (j in 1:N){\n        Rxy0[j] <- Rxy[N - j + 1]\n      }\n\n      for (j in (N+1):(2*N-1)){\n        Rxy0[j] <- Rxy1[j-N+1]\n      }\n      # plot(Rxy0, type=\"l\")\n\n      #max\n      max_Rxy <- which(Rxy == max(Rxy), arr.ind = TRUE)\n      max_Rxy_am <- max(Rxy)\n\n      max_Rxy1 <- which(Rxy1 == max(Rxy1), arr.ind = TRUE)\n      max_Rxy1_am <- max(Rxy1)\n\n      max_Rxy0 <- which(Rxy0 == max(Rxy0), arr.ind = TRUE)\n      max_Rxy0_am <- max(Rxy0)\n\n      y_vid <- 0\n      y_vid <- (Rxy0[max_Rxy0:length(Rxy0)]/max_Rxy0_am)\n      # plot((1:length(y_vid))/f,y_vid, type=\"l\")\n\n      max_y_vid <- which(y_vid[(n*5):length(y_vid)] == max(y_vid[(n*5):length(y_vid)]), arr.ind = TRUE)\n      max_y_vid_am <- max(y_vid[(n*5):length(y_vid)])\n\n      max_y_vid1 <- (max_y_vid+n*5)/f\n\n      a_y_vid <- HilbertTransform(y_vid)\n      env <- HilbertEnvelope(a_y_vid)\n      \n      output$picPlot <- renderPlot({ \n        \n        plot((1:length(y_rez))/f,y_rez, \n          main = \"Корисний (тестовий) сигнал\",\n          type=\"l\", \n          xlab = \"Час\",\n          ylab = \"Амплітуда\",\n          col=\"blue\")\n      \n      })\n      \n      output$pic1Plot <- renderPlot({\n        plot(yqq,\n             main = \"Cигнал з шумом\",\n             xlab = \"Довжина сигналу\",\n             ylab = \"Амплітуда\",\n             type = \"l\",\n             col = \"blue\")\n      })\n      \n      output$pic2Plot <- renderPlot({\n        plot((1:length(y_vid))/f,y_vid,\n             main = \"Взаємокореляційна функція\",\n             xlab = \"Час\",\n             ylab = \"Амплітуда\",\n             type = \"l\",\n             col = \"blue\")\n      })\n\n      output$pic3Plot <- renderPlot({\n        plot((1:length(y_vid)), y_vid,\n             type = \"l\",\n             main = \"Перетворення Гільберта\",\n             xlab = \"Довжина сигналу\",\n             ylab = \"Амплітуда\",\n             col = \"blue\")\n        lines((1:length(y_vid)), env, col = \"red\")\n        lines((1:length(y_vid)), -env, col = \"red\")\n      })\n      \n    }\n    if(input$barker == \"barker_5\"){\n      output$out1 <- renderText({\n        \"barker_5\"\n      })\n      \n      n <- length(y5)\n      y_000 <- y5\n      y_000[n:(2*n-1)] <- y5\n      y_000[(2*n):(3*n-1)] <- y5\n      y_000[(3*n):(4*n-1)] <- y6;\n      y_000[(4*n):(5*n-1)] <- y5;\n      \n      lh_z <- as.numeric(input$length_zero)\n      y_rez <- 0\n      y_rez[1:length(i)] <- 0\n      y_rez[(length(i)+1):(1+length(y_000)+length(i)-1)] <- y_000\n      y_rez[(1+length(y_000)+length(i)):(1+length(y_000)+lh_z*length(i))] <- 0\n      y_rez[(2+length(y_000)+lh_z*length(i)):(length(y_000)+(lh_z+5)*length(i))] <- (0.1)*y_000\n      y_rez[(1+length(y_000)+(lh_z+5)*length(i)):(1+length(y_000)+(lh_z+8)*length(i))] <- 0\n      \n      noise_k <- as.numeric(input$noise_k)\n      yqq <- (jitter(y_rez, amount = noise_k))\n      \n      y_001 <- 0\n      y_001[1:length(y_000)] <- y_000\n      y_001[(length(y_000)+1):length(yqq)] <- 0\n      \n      N<-length(yqq)\n      Rxy<-rep(0, N-1)\n      Rxy1<-rep(0, N-1)\n      Rxy0<-rep(0, 2*N-1)\n      \n      for(j in 1:N){\n        sum1 <- 0\n        \n        for(k in 1:(N-j+1)){\n          sum1 <- sum1 + yqq[k]*y_001[k+j-1]\n        }\n        \n        Rxy[j]<-sum1\n      }\n      # plot(Rxy,type=\"l\")\n      \n      for (j in 1:N){\n        sum1 <- 0\n        for (k in 1:(N-j+1)){\n          sum1 <- sum1 + y_001[k] * yqq[k + j-1]\n        }\n        Rxy1[j] <- sum1\n      }\n      # plot(Rxy1, type=\"l\")\n      \n      for (j in 1:N){\n        Rxy0[j] <- Rxy[N - j + 1]\n      }\n      \n      for (j in (N+1):(2*N-1)){\n        Rxy0[j] <- Rxy1[j-N+1]\n      }\n      # plot(Rxy0, type=\"l\")\n      \n      #max\n      max_Rxy <- which(Rxy == max(Rxy), arr.ind = TRUE)\n      max_Rxy_am <- max(Rxy)\n      \n      max_Rxy1 <- which(Rxy1 == max(Rxy1), arr.ind = TRUE)\n      max_Rxy1_am <- max(Rxy1)\n      \n      max_Rxy0 <- which(Rxy0 == max(Rxy0), arr.ind = TRUE)\n      max_Rxy0_am <- max(Rxy0)\n      \n      y_vid <- 0\n      y_vid <- (Rxy0[max_Rxy0:length(Rxy0)]/max_Rxy0_am)\n      # plot((1:length(y_vid))/f,y_vid, type=\"l\")\n      \n      max_y_vid <- which(y_vid[(n*5):length(y_vid)] == max(y_vid[(n*5):length(y_vid)]), arr.ind = TRUE)\n      max_y_vid_am <- max(y_vid[(n*5):length(y_vid)])\n      \n      max_y_vid1 <- (max_y_vid+n*5)/f\n      \n      a_y_vid <- HilbertTransform(y_vid)\n      env <- HilbertEnvelope(a_y_vid)\n      \n      output$picPlot <- renderPlot({ \n        \n        plot((1:length(y_rez))/f,y_rez, \n             main = \"Корисний (тестовий) сигнал\",\n             type=\"l\", \n             xlab = \"Час\",\n             ylab = \"Амплітуда\",\n             col=\"blue\")\n        \n      })\n      \n      output$pic1Plot <- renderPlot({\n        plot(yqq,\n             main = \"Cигнал з шумом\",\n             xlab = \"Довжина сигналу\",\n             ylab = \"Амплітуда\",\n             type = \"l\",\n             col = \"blue\")\n      })\n      \n      output$pic2Plot <- renderPlot({\n        plot((1:length(y_vid))/f,y_vid,\n             main = \"Взаємокореляційна функція\",\n             xlab = \"Час\",\n             ylab = \"Амплітуда\",\n             type = \"l\",\n             col = \"blue\")\n      })\n      \n      output$pic3Plot <- renderPlot({\n        plot((1:length(y_vid)), y_vid,\n             type = \"l\",\n             main = \"Перетворення Гільберта\",\n             xlab = \"Довжина сигналу\",\n             ylab = \"Амплітуда\",\n             col = \"blue\")\n        lines((1:length(y_vid)), env, col = \"red\")\n        lines((1:length(y_vid)), -env, col = \"red\")\n      })\n      \n    }\n    if(input$barker == \"barker_7\"){\n      output$out1 <- renderText({\n        \"barker_7\"\n      })\n      n <- length(y5)\n      y_000 <- y5\n      y_000[n:(2*n-1)] <- y5\n      y_000[(2*n):(3*n-1)] <- y5\n      y_000[(3*n):(4*n-1)] <- y6;\n      y_000[(4*n):(5*n-1)] <- y6;\n      \n      y_000[(5*n):(6*n-1)] <- y5;\n      y_000[(6*n):(7*n-1)] <- y6;\n      \n      lh_z <- as.numeric(input$length_zero)\n      y_rez <- 0\n      y_rez[1:length(i)] <- 0\n      y_rez[(length(i)+1):(1+length(y_000)+length(i)-1)] <- y_000\n      y_rez[(1+length(y_000)+length(i)):(1+length(y_000)+lh_z*length(i))] <- 0\n      y_rez[(2+length(y_000)+lh_z*length(i)):(length(y_000)+(lh_z+7)*length(i))] <- (0.1)*y_000\n      y_rez[(1+length(y_000)+(lh_z+7)*length(i)):(1+length(y_000)+(lh_z+10)*length(i))] <- 0\n      \n      noise_k <- as.numeric(input$noise_k)\n      yqq <- (jitter(y_rez, amount = noise_k))\n      \n      y_001 <- 0\n      y_001[1:length(y_000)] <- y_000\n      y_001[(length(y_000)+1):length(yqq)] <- 0\n      \n      N<-length(yqq)\n      Rxy<-rep(0, N-1)\n      Rxy1<-rep(0, N-1)\n      Rxy0<-rep(0, 2*N-1)\n      \n      for(j in 1:N){\n        sum1 <- 0\n        \n        for(k in 1:(N-j+1)){\n          sum1 <- sum1 + yqq[k]*y_001[k+j-1]\n        }\n        \n        Rxy[j]<-sum1\n      }\n      # plot(Rxy,type=\"l\")\n      \n      for (j in 1:N){\n        sum1 <- 0\n        for (k in 1:(N-j+1)){\n          sum1 <- sum1 + y_001[k] * yqq[k + j-1]\n        }\n        Rxy1[j] <- sum1\n      }\n      # plot(Rxy1, type=\"l\")\n      \n      for (j in 1:N){\n        Rxy0[j] <- Rxy[N - j + 1]\n      }\n      \n      for (j in (N+1):(2*N-1)){\n        Rxy0[j] <- Rxy1[j-N+1]\n      }\n      # plot(Rxy0, type=\"l\")\n      \n      #max\n      max_Rxy <- which(Rxy == max(Rxy), arr.ind = TRUE)\n      max_Rxy_am <- max(Rxy)\n      \n      max_Rxy1 <- which(Rxy1 == max(Rxy1), arr.ind = TRUE)\n      max_Rxy1_am <- max(Rxy1)\n      \n      max_Rxy0 <- which(Rxy0 == max(Rxy0), arr.ind = TRUE)\n      max_Rxy0_am <- max(Rxy0)\n      \n      y_vid <- 0\n      y_vid <- (Rxy0[max_Rxy0:length(Rxy0)]/max_Rxy0_am)\n      # plot((1:length(y_vid))/f,y_vid, type=\"l\")\n      \n      max_y_vid <- which(y_vid[(n*5):length(y_vid)] == max(y_vid[(n*5):length(y_vid)]), arr.ind = TRUE)\n      max_y_vid_am <- max(y_vid[(n*5):length(y_vid)])\n      \n      max_y_vid1 <- (max_y_vid+n*5)/f\n      \n      a_y_vid <- HilbertTransform(y_vid)\n      env <- HilbertEnvelope(a_y_vid)\n      \n      output$picPlot <- renderPlot({ \n        \n        plot((1:length(y_rez))/f,y_rez, \n             main = \"Корисний (тестовий) сигнал\",\n             type=\"l\", \n             xlab = \"Час\",\n             ylab = \"Амплітуда\",\n             col=\"blue\")\n        \n      })\n      \n      output$pic1Plot <- renderPlot({\n        plot(yqq,\n             main = \"Cигнал з шумом\",\n             xlab = \"Довжина сигналу\",\n             ylab = \"Амплітуда\",\n             type = \"l\",\n             col = \"blue\")\n      })\n      \n      output$pic2Plot <- renderPlot({\n        plot((1:length(y_vid))/f,y_vid,\n             main = \"Взаємокореляційна функція\",\n             xlab = \"Час\",\n             ylab = \"Амплітуда\",\n             type = \"l\",\n             col = \"blue\")\n      })\n      \n      output$pic3Plot <- renderPlot({\n        plot((1:length(y_vid)), y_vid,\n             type = \"l\",\n             main = \"Перетворення Гільберта\",\n             xlab = \"Довжина сигналу\",\n             ylab = \"Амплітуда\",\n             col = \"blue\")\n        lines((1:length(y_vid)), env, col = \"red\")\n        lines((1:length(y_vid)), -env, col = \"red\")\n      })\n    }\n  })\n  \n})\n",
    "created" : 1484496117559.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "577518805",
    "id" : "4CF9788B",
    "lastKnownWriteTime" : 1486977207,
    "last_content_update" : 1486977207308,
    "path" : "C:/Users/Mikhail/Desktop/code/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}